{"cairo_code": "%lang starknet\n%builtins pedersen range_check bitwise\n\nfrom evm.array import validate_array\nfrom evm.calls import calldataload, calldatasize\nfrom evm.exec_env import ExecutionEnvironment\nfrom evm.memory import uint256_mstore\nfrom evm.uint256 import is_eq, is_lt, is_zero, slt, u256_add, u256_shr, uint256_sar\nfrom evm.yul_api import warp_return\nfrom starkware.cairo.common.cairo_builtins import BitwiseBuiltin, HashBuiltin\nfrom starkware.cairo.common.default_dict import default_dict_finalize, default_dict_new\nfrom starkware.cairo.common.dict_access import DictAccess\nfrom starkware.cairo.common.registers import get_fp_and_pc\nfrom starkware.cairo.common.uint256 import Uint256\n\nfunc __warp_constant_0() -> (res : Uint256):\n    return (Uint256(low=0, high=0))\nend\n\n@constructor\nfunc constructor{range_check_ptr}(calldata_size, calldata_len, calldata : felt*):\n    alloc_locals\n    validate_array(calldata_size, calldata_len, calldata)\n    let (memory_dict) = default_dict_new(0)\n    let memory_dict_start = memory_dict\n    let msize = 0\n    with memory_dict, msize:\n        __constructor_meat()\n    end\n    default_dict_finalize(memory_dict_start, memory_dict, 0)\n    return ()\nend\n\n@external\nfunc __main{bitwise_ptr : BitwiseBuiltin*, range_check_ptr}(\n        calldata_size, calldata_len, calldata : felt*) -> (\n        returndata_size, returndata_len, returndata : felt*):\n    alloc_locals\n    validate_array(calldata_size, calldata_len, calldata)\n    let (__fp__, _) = get_fp_and_pc()\n    local exec_env_ : ExecutionEnvironment = ExecutionEnvironment(calldata_size=calldata_size, calldata_len=calldata_len, calldata=calldata, returndata_size=0, returndata_len=0, returndata=cast(0, felt*), to_returndata_size=0, to_returndata_len=0, to_returndata=cast(0, felt*))\n    let exec_env : ExecutionEnvironment* = &exec_env_\n    let (memory_dict) = default_dict_new(0)\n    let memory_dict_start = memory_dict\n    let msize = 0\n    let termination_token = 0\n    with exec_env, memory_dict, msize, termination_token:\n        __main_meat()\n    end\n    default_dict_finalize(memory_dict_start, memory_dict, 0)\n    return (exec_env.to_returndata_size, exec_env.to_returndata_len, exec_env.to_returndata)\nend\n\nfunc __constructor_meat{memory_dict : DictAccess*, msize, range_check_ptr}() -> ():\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=64, high=0), value=Uint256(low=128, high=0))\n    let (__warp_subexpr_0 : Uint256) = __warp_constant_0()\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    else:\n        return ()\n    end\nend\n\nfunc __warp_block_1{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, range_check_ptr, termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_2 : Uint256) = calldatasize()\n    let (__warp_subexpr_1 : Uint256) = u256_add(\n        __warp_subexpr_2,\n        Uint256(low=340282366920938463463374607431768211452, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_0 : Uint256) = slt(__warp_subexpr_1, Uint256(low=64, high=0))\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (__warp_subexpr_5 : Uint256) = calldataload(Uint256(low=4, high=0))\n    let (__warp_subexpr_4 : Uint256) = calldataload(Uint256(low=36, high=0))\n    let (__warp_subexpr_3 : Uint256) = uint256_sar(__warp_subexpr_4, __warp_subexpr_5)\n    uint256_mstore(offset=Uint256(low=128, high=0), value=__warp_subexpr_3)\n    warp_return(Uint256(low=128, high=0), Uint256(low=32, high=0))\n    return ()\nend\n\nfunc __warp_if_1{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, range_check_ptr, termination_token}(__warp_subexpr_0 : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_1()\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc __warp_block_0{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, range_check_ptr, termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_2 : Uint256) = calldataload(Uint256(low=0, high=0))\n    let (__warp_subexpr_1 : Uint256) = u256_shr(Uint256(low=224, high=0), __warp_subexpr_2)\n    let (__warp_subexpr_0 : Uint256) = is_eq(Uint256(low=1897564244, high=0), __warp_subexpr_1)\n    __warp_if_1(__warp_subexpr_0)\n    return ()\nend\n\nfunc __warp_if_0{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, range_check_ptr, termination_token}(__warp_subexpr_0 : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_0()\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc __main_meat{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, range_check_ptr, termination_token}() -> ():\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=64, high=0), value=Uint256(low=128, high=0))\n    let (__warp_subexpr_2 : Uint256) = calldatasize()\n    let (__warp_subexpr_1 : Uint256) = is_lt(__warp_subexpr_2, Uint256(low=4, high=0))\n    let (__warp_subexpr_0 : Uint256) = is_zero(__warp_subexpr_1)\n    __warp_if_0(__warp_subexpr_0)\n    if termination_token == 1:\n        return ()\n    end\n    assert 0 = 1\n    jmp rel 0\nend\n", "sol_abi": [{"inputs": [{"internalType": "int256", "name": "a", "type": "int256"}, {"internalType": "uint256", "name": "b", "type": "uint256"}], "name": "f", "outputs": [{"internalType": "int256", "name": "", "type": "int256"}], "stateMutability": "nonpayable", "type": "function"}]}