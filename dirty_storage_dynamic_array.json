{"cairo_code": "%lang starknet\n%builtins pedersen range_check bitwise\n\nfrom evm.array import validate_array\nfrom evm.calls import calldataload, calldatasize\nfrom evm.exec_env import ExecutionEnvironment\nfrom evm.hashing import uint256_pedersen, uint256_sha\nfrom evm.memory import uint256_mload, uint256_mstore\nfrom evm.uint256 import is_eq, is_lt, is_zero, slt, u256_add, u256_shl, u256_shr\nfrom evm.yul_api import warp_return\nfrom starkware.cairo.common.cairo_builtins import BitwiseBuiltin, HashBuiltin\nfrom starkware.cairo.common.default_dict import default_dict_finalize, default_dict_new\nfrom starkware.cairo.common.dict_access import DictAccess\nfrom starkware.cairo.common.registers import get_fp_and_pc\nfrom starkware.cairo.common.uint256 import Uint256, uint256_and, uint256_sub\n\nfunc __warp_constant_0() -> (res : Uint256):\n    return (Uint256(low=0, high=0))\nend\n\nfunc sload{pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(key : Uint256) -> (\n        value : Uint256):\n    let (value) = evm_storage.read(key)\n    return (value)\nend\n\nfunc sstore{pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        key : Uint256, value : Uint256):\n    evm_storage.write(key, value)\n    return ()\nend\n\n@storage_var\nfunc evm_storage(arg0 : Uint256) -> (res : Uint256):\nend\n\n@constructor\nfunc constructor{range_check_ptr}(calldata_size, calldata_len, calldata : felt*):\n    alloc_locals\n    validate_array(calldata_size, calldata_len, calldata)\n    let (memory_dict) = default_dict_new(0)\n    let memory_dict_start = memory_dict\n    let msize = 0\n    with memory_dict, msize:\n        __constructor_meat()\n    end\n    default_dict_finalize(memory_dict_start, memory_dict, 0)\n    return ()\nend\n\n@external\nfunc __main{\n        bitwise_ptr : BitwiseBuiltin*, pedersen_ptr : HashBuiltin*, range_check_ptr,\n        syscall_ptr : felt*}(calldata_size, calldata_len, calldata : felt*) -> (\n        returndata_size, returndata_len, returndata : felt*):\n    alloc_locals\n    validate_array(calldata_size, calldata_len, calldata)\n    let (__fp__, _) = get_fp_and_pc()\n    local exec_env_ : ExecutionEnvironment = ExecutionEnvironment(calldata_size=calldata_size, calldata_len=calldata_len, calldata=calldata, returndata_size=0, returndata_len=0, returndata=cast(0, felt*), to_returndata_size=0, to_returndata_len=0, to_returndata=cast(0, felt*))\n    let exec_env : ExecutionEnvironment* = &exec_env_\n    let (memory_dict) = default_dict_new(0)\n    let memory_dict_start = memory_dict\n    let msize = 0\n    let termination_token = 0\n    with exec_env, memory_dict, msize, termination_token:\n        __main_meat()\n    end\n    default_dict_finalize(memory_dict_start, memory_dict, 0)\n    return (exec_env.to_returndata_size, exec_env.to_returndata_len, exec_env.to_returndata)\nend\n\nfunc __constructor_meat{memory_dict : DictAccess*, msize, range_check_ptr}() -> ():\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=64, high=0), value=Uint256(low=128, high=0))\n    let (__warp_subexpr_0 : Uint256) = __warp_constant_0()\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    else:\n        return ()\n    end\nend\n\nfunc storage_array_index_access_uint8_dyn_ptr{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(index : Uint256) -> (\n        slot : Uint256, offset : Uint256):\n    alloc_locals\n    let (__warp_subexpr_2 : Uint256) = sload(Uint256(low=0, high=0))\n    let (__warp_subexpr_1 : Uint256) = is_lt(index, __warp_subexpr_2)\n    let (__warp_subexpr_0 : Uint256) = is_zero(__warp_subexpr_1)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    uint256_mstore(offset=Uint256(low=0, high=0), value=Uint256(low=0, high=0))\n    let (data : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=32, high=0))\n    let (__warp_subexpr_3 : Uint256) = u256_shr(Uint256(low=5, high=0), index)\n    let (slot : Uint256) = u256_add(data, __warp_subexpr_3)\n    let (offset : Uint256) = uint256_and(index, Uint256(low=31, high=0))\n    return (slot, offset)\nend\n\nfunc storage_array_index_access_uint8_dyn__ptr{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}() -> (\n        slot : Uint256, offset : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = sload(Uint256(low=0, high=0))\n    let (__warp_subexpr_0 : Uint256) = is_zero(__warp_subexpr_1)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    uint256_mstore(offset=Uint256(low=0, high=0), value=Uint256(low=0, high=0))\n    let (slot : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=32, high=0))\n    let offset : Uint256 = Uint256(low=0, high=0)\n    return (slot, offset)\nend\n\nfunc abi_encode_bool{memory_dict : DictAccess*, msize, range_check_ptr}(\n        headStart : Uint256, value0 : Uint256) -> (tail : Uint256):\n    alloc_locals\n    let (tail : Uint256) = u256_add(headStart, Uint256(low=32, high=0))\n    let (__warp_subexpr_1 : Uint256) = is_zero(value0)\n    let (__warp_subexpr_0 : Uint256) = is_zero(__warp_subexpr_1)\n    uint256_mstore(offset=headStart, value=__warp_subexpr_0)\n    return (tail)\nend\n\nfunc __warp_block_2{bitwise_ptr : BitwiseBuiltin*, range_check_ptr}(_3 : Uint256, _4 : Uint256) -> (\n        expr : Uint256):\n    alloc_locals\n    let (__warp_subexpr_2 : Uint256) = u256_shl(Uint256(low=3, high=0), _3)\n    let (__warp_subexpr_1 : Uint256) = u256_shr(__warp_subexpr_2, _4)\n    let (__warp_subexpr_0 : Uint256) = uint256_and(__warp_subexpr_1, Uint256(low=255, high=0))\n    let (expr : Uint256) = is_eq(__warp_subexpr_0, Uint256(low=1, high=0))\n    return (expr)\nend\n\nfunc __warp_if_2{bitwise_ptr : BitwiseBuiltin*, range_check_ptr}(\n        _3 : Uint256, _4 : Uint256, expr : Uint256) -> (expr : Uint256):\n    alloc_locals\n    if expr.low + expr.high != 0:\n        let (expr : Uint256) = __warp_block_2(_3, _4)\n        return (expr)\n    else:\n        return (expr)\n    end\nend\n\nfunc __warp_block_1{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_2 : Uint256) = calldatasize()\n    let (__warp_subexpr_1 : Uint256) = u256_add(\n        __warp_subexpr_2,\n        Uint256(low=340282366920938463463374607431768211452, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_0 : Uint256) = slt(__warp_subexpr_1, Uint256(low=0, high=0))\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (oldLen : Uint256) = sload(Uint256(low=0, high=0))\n    let (__warp_subexpr_4 : Uint256) = is_lt(oldLen, Uint256(low=18446744073709551616, high=0))\n    let (__warp_subexpr_3 : Uint256) = is_zero(__warp_subexpr_4)\n    if __warp_subexpr_3.low + __warp_subexpr_3.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (__warp_subexpr_5 : Uint256) = u256_add(oldLen, Uint256(low=1, high=0))\n    sstore(key=Uint256(low=0, high=0), value=__warp_subexpr_5)\n    let (slot : Uint256, offset : Uint256) = storage_array_index_access_uint8_dyn_ptr(oldLen)\n    uint256_mstore(offset=Uint256(low=0, high=0), value=Uint256(low=0, high=0))\n    let (__warp_subexpr_6 : Uint256) = uint256_sha(Uint256(low=0, high=0), Uint256(low=32, high=0))\n    sstore(key=__warp_subexpr_6, value=Uint256(low=257, high=0))\n    let (_2 : Uint256, _3 : Uint256) = storage_array_index_access_uint8_dyn__ptr()\n    let (_4 : Uint256) = sload(_2)\n    let (_5 : Uint256, _6 : Uint256) = storage_array_index_access_uint8_dyn__ptr()\n    let (__warp_subexpr_10 : Uint256) = sload(_5)\n    let (__warp_subexpr_9 : Uint256) = u256_shl(Uint256(low=3, high=0), _6)\n    let (__warp_subexpr_8 : Uint256) = u256_shr(__warp_subexpr_9, __warp_subexpr_10)\n    let (__warp_subexpr_7 : Uint256) = uint256_and(__warp_subexpr_8, Uint256(low=255, high=0))\n    let (expr : Uint256) = is_eq(__warp_subexpr_7, Uint256(low=1, high=0))\n    let (expr : Uint256) = __warp_if_2(_3, _4, expr)\n    let (memPos : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_12 : Uint256) = abi_encode_bool(memPos, expr)\n    let (__warp_subexpr_11 : Uint256) = uint256_sub(__warp_subexpr_12, memPos)\n    warp_return(memPos, __warp_subexpr_11)\n    return ()\nend\n\nfunc __warp_if_1{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_1()\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc __warp_block_0{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_2 : Uint256) = calldataload(Uint256(low=0, high=0))\n    let (__warp_subexpr_1 : Uint256) = u256_shr(Uint256(low=224, high=0), __warp_subexpr_2)\n    let (__warp_subexpr_0 : Uint256) = is_eq(Uint256(low=638722032, high=0), __warp_subexpr_1)\n    __warp_if_1(__warp_subexpr_0)\n    return ()\nend\n\nfunc __warp_if_0{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_0()\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc __main_meat{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=64, high=0), value=Uint256(low=128, high=0))\n    let (__warp_subexpr_2 : Uint256) = calldatasize()\n    let (__warp_subexpr_1 : Uint256) = is_lt(__warp_subexpr_2, Uint256(low=4, high=0))\n    let (__warp_subexpr_0 : Uint256) = is_zero(__warp_subexpr_1)\n    __warp_if_0(__warp_subexpr_0)\n    if termination_token == 1:\n        return ()\n    end\n    assert 0 = 1\n    jmp rel 0\nend\n", "sol_abi": [{"inputs": [], "name": "f", "outputs": [{"internalType": "bool", "name": "correct", "type": "bool"}], "stateMutability": "nonpayable", "type": "function"}]}